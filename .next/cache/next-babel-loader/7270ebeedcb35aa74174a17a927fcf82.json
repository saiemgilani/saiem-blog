{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport fs from 'fs';\nimport path from 'path';\nimport matter from 'gray-matter';\nconst postsDirectory = path.join(process.cwd(), 'posts');\nexport const getPost = (id, includeContent = false) => {\n  const fullPath = path.join(postsDirectory, `${id}.md`);\n  return getPostFromFile(fullPath, id, includeContent);\n};\nexport const getSortedPostsData = () => {\n  // Get file names under /posts\n  const fileNames = fs.readdirSync(postsDirectory);\n  const allPostsData = fileNames.map(fileName => {\n    // Remove \".md\" from file name to get id\n    const id = fileName.replace(/\\.md$/, ''); // Read markdown file as string\n\n    const fullPath = path.join(postsDirectory, fileName);\n    return getPostFromFile(fullPath, id);\n  }); // Sort posts by date\n\n  return allPostsData.sort((a, b) => {\n    if (a.date < b.date) {\n      return 1;\n    } else {\n      return -1;\n    }\n  });\n};\n\nconst getPostFromFile = (fullPath, id, includeContent = false) => {\n  const fileContents = fs.readFileSync(fullPath, 'utf8'); // Use gray-matter to parse the post metadata section\n\n  const matterResult = matter(fileContents); // Combine the data with the id\n\n  return _objectSpread(_objectSpread({\n    id\n  }, matterResult.data), {}, {\n    content: includeContent ? matterResult.content : null,\n    topics: matterResult.data.topics.split(',')\n  });\n};\n\nexport const getSortedTopics = () => {\n  const posts = getSortedPostsData();\n  const allTopics = posts.reduce((prev, current) => {\n    return [...prev, ...current.topics];\n  }, []);\n  const map = {};\n  allTopics.map(t => {\n    map[t] = allTopics.filter(topic => t === topic).length;\n  });\n  return Array.from(new Set(allTopics)).sort((a, b) => map[b] - map[a]);\n};","map":{"version":3,"sources":["C:/Users/saiem/Documents/GitHub/saiempage/nextjs-material-ui-blog/src/lib/posts.tsx"],"names":["fs","path","matter","postsDirectory","join","process","cwd","getPost","id","includeContent","fullPath","getPostFromFile","getSortedPostsData","fileNames","readdirSync","allPostsData","map","fileName","replace","sort","a","b","date","fileContents","readFileSync","matterResult","data","content","topics","split","getSortedTopics","posts","allTopics","reduce","prev","current","t","filter","topic","length","Array","from","Set"],"mappings":";;;;;;AAAA,OAAOA,EAAP,MAAe,IAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAGA,MAAMC,cAAc,GAAGF,IAAI,CAACG,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,OAAzB,CAAvB;AAEA,OAAO,MAAMC,OAAO,GAAG,CAACC,EAAD,EAAaC,cAAc,GAAG,KAA9B,KAAkD;AACvE,QAAMC,QAAQ,GAAGT,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA2B,GAAEK,EAAG,KAAhC,CAAjB;AACA,SAAOG,eAAe,CAACD,QAAD,EAAWF,EAAX,EAAeC,cAAf,CAAtB;AACD,CAHM;AAKP,OAAO,MAAMG,kBAAkB,GAAG,MAAkB;AAClD;AACA,QAAMC,SAAS,GAAGb,EAAE,CAACc,WAAH,CAAeX,cAAf,CAAlB;AACA,QAAMY,YAAwB,GAAGF,SAAS,CAACG,GAAV,CAAeC,QAAD,IAAc;AAC3D;AACA,UAAMT,EAAE,GAAGS,QAAQ,CAACC,OAAT,CAAiB,OAAjB,EAA0B,EAA1B,CAAX,CAF2D,CAI3D;;AACA,UAAMR,QAAQ,GAAGT,IAAI,CAACG,IAAL,CAAUD,cAAV,EAA0Bc,QAA1B,CAAjB;AACA,WAAON,eAAe,CAACD,QAAD,EAAWF,EAAX,CAAtB;AACD,GAPgC,CAAjC,CAHkD,CAWlD;;AACA,SAAOO,YAAY,CAACI,IAAb,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACjC,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB;AACnB,aAAO,CAAP;AACD,KAFD,MAEO;AACL,aAAO,CAAC,CAAR;AACD;AACF,GANM,CAAP;AAOD,CAnBM;;AAqBP,MAAMX,eAAe,GAAG,CAACD,QAAD,EAAmBF,EAAnB,EAA+BC,cAAc,GAAG,KAAhD,KAAoE;AAC1F,QAAMc,YAAY,GAAGvB,EAAE,CAACwB,YAAH,CAAgBd,QAAhB,EAA0B,MAA1B,CAArB,CAD0F,CAG1F;;AACA,QAAMe,YAAY,GAAGvB,MAAM,CAACqB,YAAD,CAA3B,CAJ0F,CAK1F;;AACA;AACEf,IAAAA;AADF,KAEKiB,YAAY,CAACC,IAFlB;AAGEC,IAAAA,OAAO,EAAElB,cAAc,GAAGgB,YAAY,CAACE,OAAhB,GAA0B,IAHnD;AAIEC,IAAAA,MAAM,EAAEH,YAAY,CAACC,IAAb,CAAkBE,MAAlB,CAAyBC,KAAzB,CAA+B,GAA/B;AAJV;AAMD,CAZD;;AAcA,OAAO,MAAMC,eAAe,GAAG,MAAgB;AAC7C,QAAMC,KAAK,GAAGnB,kBAAkB,EAAhC;AAEA,QAAMoB,SAAS,GAAGD,KAAK,CAACE,MAAN,CAAa,CAACC,IAAD,EAAiBC,OAAjB,KAAuC;AACpE,WAAO,CAAC,GAAGD,IAAJ,EAAU,GAAGC,OAAO,CAACP,MAArB,CAAP;AACD,GAFiB,EAEf,EAFe,CAAlB;AAIA,QAAMZ,GAA2B,GAAG,EAApC;AAEAgB,EAAAA,SAAS,CAAChB,GAAV,CAAeoB,CAAD,IAAO;AACnBpB,IAAAA,GAAG,CAACoB,CAAD,CAAH,GAASJ,SAAS,CAACK,MAAV,CAAkBC,KAAD,IAAWF,CAAC,KAAKE,KAAlC,EAAyCC,MAAlD;AACD,GAFD;AAIA,SAAOC,KAAK,CAACC,IAAN,CAAW,IAAIC,GAAJ,CAAQV,SAAR,CAAX,EAA+Bb,IAA/B,CAAoC,CAACC,CAAD,EAAIC,CAAJ,KAAUL,GAAG,CAACK,CAAD,CAAH,GAASL,GAAG,CAACI,CAAD,CAA1D,CAAP;AACD,CAdM","sourcesContent":["import fs from 'fs'\r\nimport path from 'path'\r\nimport matter from 'gray-matter'\r\nimport { PostData } from '../types/posts'\r\n\r\nconst postsDirectory = path.join(process.cwd(), 'posts')\r\n\r\nexport const getPost = (id: string, includeContent = false): PostData => {\r\n  const fullPath = path.join(postsDirectory, `${id}.md`)\r\n  return getPostFromFile(fullPath, id, includeContent)\r\n}\r\n\r\nexport const getSortedPostsData = (): PostData[] => {\r\n  // Get file names under /posts\r\n  const fileNames = fs.readdirSync(postsDirectory)\r\n  const allPostsData: PostData[] = fileNames.map((fileName) => {\r\n    // Remove \".md\" from file name to get id\r\n    const id = fileName.replace(/\\.md$/, '')\r\n\r\n    // Read markdown file as string\r\n    const fullPath = path.join(postsDirectory, fileName)\r\n    return getPostFromFile(fullPath, id)\r\n  })\r\n  // Sort posts by date\r\n  return allPostsData.sort((a, b) => {\r\n    if (a.date < b.date) {\r\n      return 1\r\n    } else {\r\n      return -1\r\n    }\r\n  })\r\n}\r\n\r\nconst getPostFromFile = (fullPath: string, id: string, includeContent = false): PostData => {\r\n  const fileContents = fs.readFileSync(fullPath, 'utf8')\r\n\r\n  // Use gray-matter to parse the post metadata section\r\n  const matterResult = matter(fileContents)\r\n  // Combine the data with the id\r\n  return {\r\n    id,\r\n    ...matterResult.data,\r\n    content: includeContent ? matterResult.content : null,\r\n    topics: matterResult.data.topics.split(','),\r\n  } as PostData\r\n}\r\n\r\nexport const getSortedTopics = (): string[] => {\r\n  const posts = getSortedPostsData()\r\n\r\n  const allTopics = posts.reduce((prev: string[], current: PostData) => {\r\n    return [...prev, ...current.topics]\r\n  }, [])\r\n\r\n  const map: Record<string, number> = {}\r\n\r\n  allTopics.map((t) => {\r\n    map[t] = allTopics.filter((topic) => t === topic).length\r\n  })\r\n\r\n  return Array.from(new Set(allTopics)).sort((a, b) => map[b] - map[a])\r\n}\r\n"]},"metadata":{},"sourceType":"module"}