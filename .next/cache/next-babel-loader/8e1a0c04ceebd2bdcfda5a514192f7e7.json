{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\saiem\\\\Documents\\\\GitHub\\\\saiempage\\\\nextjs-material-ui-blog\\\\src\\\\theme\\\\ThemeProvider.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core';\nimport { lightTheme, darkTheme } from './theme';\nexport var ToggleThemeContext = /*#__PURE__*/React.createContext({\n  toggleTheme: function toggleTheme() {\n    console.log();\n  },\n  isDark: false\n});\nexport var ThemeProvider = function ThemeProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState({\n    appliedTheme: darkTheme,\n    themeName: 'darkTheme'\n  }),\n      selectedTheme = _useState[0],\n      setSelectedTheme = _useState[1];\n\n  useEffect(function () {\n    var theme = localStorage.getItem('theme');\n\n    if (theme && theme === 'lightTheme') {\n      setSelectedTheme({\n        appliedTheme: lightTheme,\n        themeName: 'lightTheme'\n      });\n    }\n  }, []);\n  var toggleTheme = useCallback(function () {\n    if (!selectedTheme || selectedTheme.themeName === 'darkTheme') {\n      setSelectedTheme({\n        appliedTheme: lightTheme,\n        themeName: 'lightTheme'\n      });\n      localStorage.setItem('theme', 'lightTheme');\n    } else {\n      setSelectedTheme({\n        appliedTheme: darkTheme,\n        themeName: 'darkTheme'\n      });\n      localStorage.setItem('theme', 'darkTheme');\n    }\n  }, [selectedTheme, setSelectedTheme]);\n  return /*#__PURE__*/_jsxDEV(ToggleThemeContext.Provider, {\n    value: {\n      toggleTheme: toggleTheme,\n      isDark: !(selectedTheme.themeName === 'lightTheme')\n    },\n    children: /*#__PURE__*/_jsxDEV(MuiThemeProvider, {\n      theme: selectedTheme.appliedTheme,\n      children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, _this), children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ThemeProvider, \"9XfP1pFzjd2i1z2vAvP8LIxrU4I=\");\n\n_c = ThemeProvider;\nexport default ThemeProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"sources":["C:/Users/saiem/Documents/GitHub/saiempage/nextjs-material-ui-blog/src/theme/ThemeProvider.tsx"],"names":["React","useCallback","useEffect","useState","MuiThemeProvider","CssBaseline","lightTheme","darkTheme","ToggleThemeContext","createContext","toggleTheme","console","log","isDark","ThemeProvider","children","appliedTheme","themeName","selectedTheme","setSelectedTheme","theme","localStorage","getItem","setItem"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,mBAA9C;AACA,SAASC,UAAT,EAAqBC,SAArB,QAAsC,SAAtC;AAOA,OAAO,IAAMC,kBAAkB,gBAAGR,KAAK,CAACS,aAAN,CAAoB;AACpDC,EAAAA,WAAW,EAAE,uBAAM;AACjBC,IAAAA,OAAO,CAACC,GAAR;AACD,GAHmD;AAIpDC,EAAAA,MAAM,EAAE;AAJ4C,CAApB,CAA3B;AAYP,OAAO,IAAMC,aAA2C,GAAG,SAA9CA,aAA8C,OAAsC;AAAA;;AAAA,MAAnCC,QAAmC,QAAnCA,QAAmC;;AAAA,kBACrDZ,QAAQ,CAAgB;AAAEa,IAAAA,YAAY,EAAET,SAAhB;AAA2BU,IAAAA,SAAS,EAAE;AAAtC,GAAhB,CAD6C;AAAA,MACxFC,aADwF;AAAA,MACzEC,gBADyE;;AAG/FjB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMkB,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIF,KAAK,IAAIA,KAAK,KAAK,YAAvB,EAAqC;AACnCD,MAAAA,gBAAgB,CAAC;AAAEH,QAAAA,YAAY,EAAEV,UAAhB;AAA4BW,QAAAA,SAAS,EAAE;AAAvC,OAAD,CAAhB;AACD;AACF,GALQ,EAKN,EALM,CAAT;AAOA,MAAMP,WAAW,GAAGT,WAAW,CAAC,YAAM;AACpC,QAAI,CAACiB,aAAD,IAAkBA,aAAa,CAACD,SAAd,KAA4B,WAAlD,EAA+D;AAC7DE,MAAAA,gBAAgB,CAAC;AAAEH,QAAAA,YAAY,EAAEV,UAAhB;AAA4BW,QAAAA,SAAS,EAAE;AAAvC,OAAD,CAAhB;AACAI,MAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8B,YAA9B;AACD,KAHD,MAGO;AACLJ,MAAAA,gBAAgB,CAAC;AAAEH,QAAAA,YAAY,EAAET,SAAhB;AAA2BU,QAAAA,SAAS,EAAE;AAAtC,OAAD,CAAhB;AACAI,MAAAA,YAAY,CAACE,OAAb,CAAqB,OAArB,EAA8B,WAA9B;AACD;AACF,GAR8B,EAQ5B,CAACL,aAAD,EAAgBC,gBAAhB,CAR4B,CAA/B;AAUA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAET,MAAAA,WAAW,EAAXA,WAAF;AAAeG,MAAAA,MAAM,EAAE,EAAEK,aAAa,CAACD,SAAd,KAA4B,YAA9B;AAAvB,KAApC;AAAA,2BACE,QAAC,gBAAD;AAAkB,MAAA,KAAK,EAAEC,aAAa,CAACF,YAAvC;AAAA,8BACE,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,eADF,EAEGD,QAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAQD,CA5BM;;GAAMD,a;;KAAAA,a;AA8Bb,eAAeA,aAAf","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\r\nimport { MuiThemeProvider, CssBaseline } from '@material-ui/core'\r\nimport { lightTheme, darkTheme } from './theme'\r\nimport { Theme } from '@material-ui/core'\r\n\r\ninterface ThemeProviderProps {\r\n  children: React.ReactNode\r\n}\r\n\r\nexport const ToggleThemeContext = React.createContext({\r\n  toggleTheme: () => {\r\n    console.log()\r\n  },\r\n  isDark: false,\r\n})\r\n\r\ntype SelectedTheme = {\r\n  themeName: string\r\n  appliedTheme: Theme\r\n}\r\n\r\nexport const ThemeProvider: React.FC<ThemeProviderProps> = ({ children }: ThemeProviderProps) => {\r\n  const [selectedTheme, setSelectedTheme] = useState<SelectedTheme>({ appliedTheme: darkTheme, themeName: 'darkTheme' })\r\n\r\n  useEffect(() => {\r\n    const theme = localStorage.getItem('theme')\r\n    if (theme && theme === 'lightTheme') {\r\n      setSelectedTheme({ appliedTheme: lightTheme, themeName: 'lightTheme' })\r\n    }\r\n  }, [])\r\n\r\n  const toggleTheme = useCallback(() => {\r\n    if (!selectedTheme || selectedTheme.themeName === 'darkTheme') {\r\n      setSelectedTheme({ appliedTheme: lightTheme, themeName: 'lightTheme' })\r\n      localStorage.setItem('theme', 'lightTheme')\r\n    } else {\r\n      setSelectedTheme({ appliedTheme: darkTheme, themeName: 'darkTheme' })\r\n      localStorage.setItem('theme', 'darkTheme')\r\n    }\r\n  }, [selectedTheme, setSelectedTheme])\r\n\r\n  return (\r\n    <ToggleThemeContext.Provider value={{ toggleTheme, isDark: !(selectedTheme.themeName === 'lightTheme') }}>\r\n      <MuiThemeProvider theme={selectedTheme.appliedTheme}>\r\n        <CssBaseline />\r\n        {children}\r\n      </MuiThemeProvider>\r\n    </ToggleThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport default ThemeProvider\r\n"]},"metadata":{},"sourceType":"module"}